1. En utilisant la même approche de collection de car (voitures) que dans les exercices de la dernière section,
    créez une Collection de car mais utilisez l'API Streams pour imprimer uniquement les noms de modèles de car.

2. Comment pourriez-vous utiliser l'API Streams pour filtrer (ne pas afficher) toutes les cars fabriquées avant une certaine année ?
   (Si vous avez modélisé l'année de la voiture à l'aide Year date/time class, celle-ci possède une méthode isAfter()).

3. Comment créer un stream (flux) de cars (voitures) sans créer explicitement une collection de cars ?
    Aide => Stream.of(new Car(), new Car(),…etc.)

4. Ajoutez un field price (prix) Integer supplémentaire à votre classe/record Car. Utilisez les Streams (flux) pour ajouter le cost (coût) total
   de toutes les cars de votre collection/stream. (Il y a deux façons de procéder)

   4.1  Utilisez les Streams (flux) pour trouver le prix moyen (average price) de toutes les cars (deux façons de procéder également) - aucun code fourni

   4.2 Comment pourriez-vous faire l'exercice 4 avec Streams et BigDecimal (pour la précision des décimales) ?

   4.3 Comment pourriez-vous faire l'exercice 4.2 mais en output une String money en utilisant uniquement l'API Streams ?
        Solution présentée dans la solution 4.2

5. Utilisez l'API Streams pour sort (trier) un stream (flux) de cars (voitures) dans l'ordre inverse par modèle (model)

    5.1 Pour ce faire, il faut trier (sorting) par marque (mark), puis par modèle (model), puis par année (year) - le tout en une seule fois.

6. Utilisez uniquement l'API Streams et une collection ou un Stream (flux) d'objets Car pour produire la sortie suivante : "S, X, 3, Y, Roadster"

7. Ajoutez d'autres marques (makes) de cars (voitures) à votre collection de cars (voitures), puis Marque (Make)


Make   Model   Year     Price
Tesla   S       2014    $90,000.99
Tesla   X       2015    $110,000.99
Tesla   3       2016    $55,000.99
Tesla   Y       2017    $60,000.99
Tesla  Roadster 2009    $135,000.99
Lucid   Air     2021    $77,399.99
Hyundai Ioniq   2021    $34,250.00
Hyundai Kona    2021    $38,575.00
Porsche Taycan  2021    $81,250.00
Audi e-tron     2021    $66,995.00
Volkswagen ID.4 2021    $41,190.00

    7.1 Déterminer le prix (price) total par marque (make)

    7.2 Déterminer le prix moyen d'une voiture par marque (average car price by make)

        7.2.1 Cette question sera amusante et stimulante. Vous voudrez jeter un coup d'œil à la fonction Collectors.teeing()
              que je n'ai pas explicitement enseignée, mais jetez un coup d'œil à sa javadoc.
              Si cela s'avère trop difficile mais que vous voulez quand même l'essayer sans regarder @ ma solution, ce sera
              BEAUCOUP plus facile si vous convertissez les prix en n'importe quel autre type numérique avant d'utiliser l'API
              API Streams (mais pas aussi amusant...)

        7.2.2 Avez-vous reussit 7.2.1 ? Rendons les choses encore plus amusantes. Formatez les prix moyens pour devise (currency), dans l'API Streams.

    7.3 Déterminer le nombre de voitures par année puis par marque (Determine number of cars by year and then by make)

    7.4 Déterminer le nombre de voitures par marque en créant d'abord une nouvelle Map vide, puis en itérant sur la collection de cars voitures (que vous avez utilisée pour les exercices précédents)
        et en utilisant une Méthode Fonctionnelle de l'interface Map pour remplir votre Map vide.